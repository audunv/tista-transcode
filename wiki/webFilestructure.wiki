This describes the file tree for the web prototype, and the purpose of each file.

= Tree =

*File structure:*
{{{
|-- LoremIpsum.class.php
|-- core.php
|-- events
|   |-- upload-subs-post.php
|   |-- upload-video-post.php
|   `-- upload-video-pre.php
|-- fetcher.php
|-- first.php
|-- img
|   |-- annot.png
|   |-- dot-red.png
|   `-- dot-yellow.png
|-- import.php
|-- inc
|   |-- upload-video.php
|   |-- video-list.php
|-- js
|   |-- annotations.js
|   |-- core.js
|   |-- genkey.php
|   |-- jquery-min.js
|   `-- upload.js
|-- policy.php
|-- sql.php
|-- style2.css
|-- subs.php
|-- tools.php
`-- video.php
}}}

== File description ==

  * *`.htaccess`*
    * Apache configuration settings. READ MORE SOMEWHERE
  * *`LoremIpsum.class.php`*
    * used for generating random sentences, used to generate fictive video desciptions
  * *`core.php`*
    * Used for initialization of global PHP variables and functions. Used by most PHP files
  * *`events/upload-subs-post.php`*
    * script that receives, processes and stores the annotations that get uploaded
  * *`events/upload-video-post.php`*
    * After upload to Amazon S3 storage is done, the user is redirected here with some information about the uploaded object. READ MORE SOMEWHERE
  * *`events/upload-video-pre.php`*
    * Generates policy and certificate to allow upload of object to Amazon. READ MORE SOMEWHERE
  * *`fetcher.php`*
    * various set functions to extract data from the database
  * *`first.php`*
    * TODO
  * *`import.php`*
    * parses SRT files
  * *`inc/upload-video.php`*
    * HTML for video upload form
  * *`inc/video-list.php`*
    * lists all uploaded videos in HTML
  * *`js/annotations.js`*
    * JavaScript for showing annotations while in video view
  * *`js/core.js`*
    * Used for initialization of global variables, functions and objects, used in all pages
  * *`js/genkey.php`*
    * TODO
  * *`js/jquery-min.js`*
    * jQuery library
  * *`js/upload.js`*
    * JavaScript used in upload form
  * *`policy.php`*
    * creates certificate and policy to allow upload of objects to Amazon S3
  * *`sql.php`*
    * handles database connections and queries
  * *`style2.css`*
    * stylesheet
  * *`subs.php`*
    * handles annotation objects
  * *`tools.php`*
    * common used functions
  * *`video.php`*
    * handles the video objects

=== Notes ===

==== .htaccess ====
Used to rewrite URL's. Parameters are sent as `/par1/par2`. Eg.:
{{{
/view/4863
}}}
In this example, the site for viewing a video is requested, with video ID 4863. This makes the URI less confusing and more clean. The only case where query strings are used is post upload of an object to Amazon S3, but the user is immediately redirected to a new page. 

==== core.php ====

This file defines all common PHP classes, variables and functions. MER OM VIKTIGE VARIABLER

==== events/upload-subs-post.php ====

This script receives, processes and stores uploaded annotations. An SRT-formatted file is required. Read more about the syntax [webAnnotations#uploading here].

==== events/upload-video-post.php ====

After the user has uploaded an object to Amazon S3, he gets redirected back to a callback URI. A query string follows the callback, giving information about the uploaded object:
  * a random generated ID used when generating the policy to allow upload
  * the original file name, extension removed
  * Amazon S3 bucket name
  * location in bucket of the uploaded object
  * ~~an Amazon S3 object reference (not used)~~

The following pseudocode will describe the flow of the code:

{{{

FOR all formats defined in $GLOBALS['ttc']['output']
  compose URI to request TTC server
  requesting TTC to add job to transcode to a given output format (footnote: see below code)
  IF job added successfully
    IF this is first job added so far in this instance
      add movie to database
      store ID for movie
    add movie format to database, using movie ID as part of primary key

redirect user to URI for viewing processed video
}}}

**Footnote:** for some reason, curl and other functions for doing a HTTP request fails and returns a HTTP 400 error code for ~1/5 of the requests, corrupting the database. As a preliminary fix, the HTTP request is done until the response code is not HTTP 400. This should most definitively be fixed.

==== events/upload-video-pre.php ====
==== fetcher.php  ====
==== first.php ====
==== import.php ====
==== inc/upload-video.php ====
==== js/annotations.js ====
==== js/core.js ====
==== js/genkey.php ====
==== js/upload.js ====
==== policy.php ====
==== sql.php ====
==== subs.php ====
==== tools.php ====
==== video.php ====
